<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exercise on Muh Hijab Muallif</title><link>https://karapho712.github.io/muh-hijab-muallif-docsyy/en/categories/exercise/</link><description>Recent content in Exercise on Muh Hijab Muallif</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 23 Oct 2024 07:06:31 +0700</lastBuildDate><atom:link href="https://karapho712.github.io/muh-hijab-muallif-docsyy/en/categories/exercise/index.xml" rel="self" type="application/rss+xml"/><item><title>Calculate diagonal of array</title><link>https://karapho712.github.io/muh-hijab-muallif-docsyy/en/blog/2024/10/23/calculate-diagonal-of-array/</link><pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate><guid>https://karapho712.github.io/muh-hijab-muallif-docsyy/en/blog/2024/10/23/calculate-diagonal-of-array/</guid><description>TL:DR function diagonalDifference(matrix) { let primaryDiagonalSum = 0; let secondaryDiagonalSum = 0; for (let i = 0; i &amp;lt; matrix.length; i++) { primaryDiagonalSum += matrix[i][i]; secondaryDiagonalSum += matrix[i][matrix.length - 1 - i]; } return Math.abs(primaryDiagonalSum - secondaryDiagonalSum); } Explenation Calculate the sum of the primary diagonal (from the top-left to the bottom-right).
Calculate the sum of the secondary diagonal (from the top-right to the bottom-left).
Compute the absolute difference between these two sums.</description></item><item><title>How to find unique number in array</title><link>https://karapho712.github.io/muh-hijab-muallif-docsyy/en/blog/2024/10/15/how-to-find-unique-number-in-array/</link><pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate><guid>https://karapho712.github.io/muh-hijab-muallif-docsyy/en/blog/2024/10/15/how-to-find-unique-number-in-array/</guid><description>TL:DR const numbers = [1, 2, 3, 4, 3, 2, 1]; const uniqueNumbers = numbers.filter((num, index, arr) =&amp;gt; { return arr.indexOf(num) === arr.lastIndexOf(num); }); console.log(uniqueNumbers); Or using an object-based approach const frequency = {}; numbers.forEach(num =&amp;gt; { frequency[num] = (frequency[num] || 0) + 1; }); const uniqueNumbers = Object.keys(frequency).filter(key =&amp;gt; frequency[key] === 1).map(Number); console.log(uniqueNumbers); Explenation 1 const numbers = [1, 2, 3, 4, 3, 2, 1]; const uniqueNumbers = numbers.filter((num, index, arr) =&amp;gt; { return arr.</description></item></channel></rss>